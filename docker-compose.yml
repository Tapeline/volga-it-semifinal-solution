services:
  account_service:
    build: AccountService
    hostname: account.service
    environment:
      SECRET_KEY: ${SECRET_KEY}
      PG_USER: ${DB_USER}
      PG_PASS: ${DB_PASS}
      PG_HOST: account_db
      PG_PORT: 5432
      MODE: production
      ALLOWED_HOSTS: "*"
    ports:
      - "8081:8000"
    expose:
      - 8000
    networks:
      - sh_main_network
    depends_on:
      account_db:
        condition: service_healthy

  account_db:
    image: postgres:13.3
    hostname: account_db
    environment:
      POSTGRES_DB: account_db
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5700:5432"
    expose:
      - "5432"
    networks:
      - sh_main_network
    volumes:
      - account_pgdata:/var/lib/postgresql/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d account_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped



  hospital_service:
    build: HospitalService
    hostname: hospital.service
    environment:
      SECRET_KEY: ${SECRET_KEY}
      PG_USER: ${DB_USER}
      PG_PASS: ${DB_PASS}
      PG_HOST: hospital_db
      PG_PORT: 5432
      MODE: production
      ALLOWED_HOSTS: "*"
      ACCOUNT_SERVICE: "http://account.service:8000"
    ports:
      - "8082:8000"
    expose:
      - 8000
    networks:
      - sh_main_network
    depends_on:
      hospital_db:
        condition: service_healthy
      account_service:
        condition: service_started

  hospital_db:
    image: postgres:13.3
    hostname: hospital_db
    environment:
      POSTGRES_DB: hospital_db
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5701:5432"
    expose:
      - "5432"
    networks:
      - sh_main_network
    volumes:
      - hospital_pgdata:/var/lib/postgresql/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d hospital_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped



  timetable_service:
    build: TimetableService
    hostname: timetable.service
    environment:
      SECRET_KEY: ${SECRET_KEY}
      PG_USER: ${DB_USER}
      PG_PASS: ${DB_PASS}
      PG_HOST: timetable_db
      PG_PORT: 5432
      MODE: production
      ALLOWED_HOSTS: "*"
      HOSPITAL_SERVICE: "http://hospital.service:8000"
      ACCOUNT_SERVICE: "http://account.service:8000"
    ports:
      - "8083:8000"
    expose:
      - 8000
    networks:
      - sh_main_network
    depends_on:
      timetable_db:
        condition: service_healthy
      account_service:
        condition: service_started
      hospital_service:
        condition: service_started

  timetable_db:
    image: postgres:13.3
    hostname: timetable_db
    environment:
      POSTGRES_DB: timetable_db
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5702:5432"
    expose:
      - "5432"
    networks:
      - sh_main_network
    volumes:
      - timetable_pgdata:/var/lib/postgresql/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d timetable_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped



  document_service:
    build: DocumentService
    hostname: document.service
    environment:
      SECRET_KEY: ${SECRET_KEY}
      PG_USER: ${DB_USER}
      PG_PASS: ${DB_PASS}
      PG_HOST: document_db
      PG_PORT: 5432
      MODE: production
      ALLOWED_HOSTS: "*"
      ACCOUNT_SERVICE: "http://account.service:8000"
      HOSPITAL_SERVICE: "http://hospital.service:8000"
    ports:
      - "8084:8000"
    expose:
      - 8000
    networks:
      - sh_main_network
    depends_on:
      document_db:
        condition: service_healthy
      account_service:
        condition: service_started
      hospital_service:
        condition: service_started
      elasticsearch:
        condition: service_started

  document_db:
    image: postgres:13.3
    hostname: document_db
    environment:
      POSTGRES_DB: document_db
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5703:5432"
    expose:
      - "5432"
    networks:
      - sh_main_network
    volumes:
      - document_pgdata:/var/lib/postgresql/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d document_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped



  elasticsearch:
    image: elasticsearch:7.17.25
    #build: Elasticsearch
    environment:
      discovery.type: 'single-node'
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: "true"
      ELASTIC_PASSWORD: ${ELASTIC_PASS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    expose:
      - "9200"
      - "9300"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - sh_main_network

  kibana:
    image: kibana:7.17.25
    restart: always
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
      ELASTICSEARCH_USERNAME: ${ELASTIC_KIBANA_USER}
      ELASTICSEARCH_PASSWORD: ${ELASTIC_KIBANA_PASS}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sh_main_network
    #volumes:
      #- ./kibana.yml:/usr/share/kibana/config/kibana.yml



networks:
  sh_main_network:
    driver: bridge



volumes:
  account_pgdata:
  hospital_pgdata:
  timetable_pgdata:
  document_pgdata:
  elastic_data:

# todo: jwt authorization in swagger